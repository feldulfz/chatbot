var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AiService.html",[0,0.801,1,0.521]],["body/injectables/AiService.html",[0,0.731,1,0.475,2,1.358,3,0.568,4,0.466,5,0.594,6,1.66,7,0.568,8,0.379,9,0.594,10,2.123,11,1.628,12,1.628,13,1.548,14,1.738,15,1.628,16,1.881,17,1.32,18,1.843,19,1.843,20,1.333,21,1.641,22,2.127,23,2.417,24,1.358,25,1.843,26,0.078,27,1.431,28,1.358,29,1.32,30,1.979,31,1.358,32,1.641,33,1.32,34,0.72,35,1.641,36,1.32,37,1.081,38,1.32,39,1.358,40,1.934,41,1.738,42,1.738,43,1.333,44,1.333,45,1.333,46,1.358,47,1.32,48,1.358,49,1.843,50,1.358,51,1.358,52,1.081,53,1.358,54,1.333,55,1.358,56,0.89,57,0.466,58,0.731,59,0.843,60,1.097,61,0.594,62,0.956,63,2.001,64,1.02,65,1.242,66,1.333,67,2.001,68,1.639,69,0.568,70,0.843,71,0.568,72,0.568,73,0.69,74,0.69,75,0.69,76,0.69,77,0.843,78,1.509,79,0.843,80,0.843,81,1.32,82,1.32,83,0.843,84,0.843,85,0.843,86,1.081,87,0.69,88,0.843,89,0.843,90,0.568,91,1.333,92,1.097,93,0.69,94,1.081,95,1.639,96,0.69,97,0.69,98,0.69,99,0.69,100,0.69,101,0.69,102,0.69,103,0.69,104,0.69,105,0.69,106,0.69,107,0.69,108,0.69,109,0.568,110,1.639,111,0.69,112,0.843,113,0.466,114,1.934,115,1.32,116,1.32,117,0.843,118,1.32,119,0.843,120,1.32,121,1.32,122,0.843,123,1.32,124,0.843,125,0.69,126,0.843,127,1.32,128,0.843,129,0.843,130,0.843,131,1.32,132,1.333,133,1.333,134,0.843,135,0.843,136,0.69,137,0.843,138,0.69,139,0.843,140,0.843,141,0.843,142,0.69,143,0.843,144,0.843,145,0.843,146,0.843,147,0.843,148,0.843,149,0.843,150,0.843,151,1.32,152,0.843,153,0.843,154,0.843,155,0.89,156,0.843,157,0.843,158,1.628,159,0.843,160,0.843,161,0.843,162,0.843,163,0.843,164,1.32,165,0.843,166,0.843,167,0.843,168,0.843,169,0.843,170,0.843,171,0.843,172,0.843,173,0.843,174,0.843,175,0.035,176,0.035]],["title/components/AppComponent.html",[177,0.801,178,1.185]],["body/components/AppComponent.html",[1,0.802,3,0.831,4,0.682,5,0.555,8,0.555,9,0.79,13,1.587,17,1.756,23,2.228,25,1.233,26,0.078,27,0.831,30,1.437,33,1.756,34,0.632,40,1.009,41,1.674,42,1.674,56,1.502,57,0.682,60,0.831,64,0.682,65,1.183,71,1.183,72,0.831,90,0.831,91,1.437,92,1.183,93,1.009,94,1.009,95,1.928,96,1.009,97,1.009,98,1.009,99,1.009,100,1.009,101,1.009,102,1.009,103,1.009,104,1.009,105,1.009,106,1.009,107,1.009,108,1.009,109,0.831,110,1.009,111,1.009,113,0.682,155,1.183,175,0.046,176,0.046,177,1.132,178,1.824,179,1.437,180,1.532,181,1.986,182,1.532,183,1.532,184,1.233,185,1.532,186,2.769,187,2.448,188,2.182,189,2.541,190,1.824,191,2.829,192,3.295,193,2.182,194,2.829,195,3.795,196,3.795,197,2.769,198,1.986,199,2.182,200,1.986,201,2.182,202,3.59,203,2.829,204,2.829,205,1.986,206,1.986,207,1.532,208,1.233,209,1.986,210,1.532,211,1.532,212,1.986,213,1.756,214,2.182,215,1.532,216,1.986,217,1.986,218,2.829,219,2.829,220,1.986,221,1.986,222,1.986,223,1.986,224,1.986,225,1.986,226,1.986,227,1.532,228,2.182,229,2.182,230,1.532,231,2.769,232,1.532,233,1.532,234,1.532,235,1.532]],["title/components/ChatComponent.html",[177,0.801,190,1.185]],["body/components/ChatComponent.html",[1,0.745,3,0.71,4,0.583,5,0.475,8,0.475,9,0.705,17,1.567,20,1.531,21,2.572,23,2.401,25,1.87,26,0.078,27,1.395,32,1.31,33,1.87,34,0.379,35,1.31,37,1.283,41,1.695,42,1.695,52,1.283,54,1.695,56,1.395,57,0.583,60,0.71,62,0.932,64,0.867,68,1.283,72,0.71,113,1.035,114,0.863,133,0.863,175,0.041,176,0.041,177,1.035,178,0.863,179,1.283,180,1.31,182,1.31,183,1.31,185,1.31,186,2.572,187,2.07,188,1.947,189,2.324,190,1.695,193,1.947,199,1.947,207,1.31,208,1.054,210,1.31,211,1.31,213,1.054,227,1.31,228,1.947,229,1.947,230,1.31,231,2.572,232,1.31,233,1.31,234,1.31,235,1.31,236,1.31,237,3.013,238,2.524,239,2.524,240,2.524,241,3.564,242,3.013,243,3.013,244,2.524,245,3.335,246,2.524,247,3.013,248,1.698,249,1.698,250,1.698,251,1.698,252,1.698,253,1.698,254,3.335,255,3.013,256,3.013,257,2.524,258,1.698,259,1.698,260,1.31,261,1.698,262,2.324,263,1.698,264,1.698,265,1.698,266,1.698,267,1.31,268,1.698,269,1.698,270,1.698,271,1.698,272,1.31,273,3.735,274,2.881,275,2.524,276,2.524,277,3.335,278,2.524,279,2.524,280,2.524,281,2.524,282,3.335,283,2.524]],["title/interfaces/ChatContext.html",[61,0.652,69,0.976]],["body/interfaces/ChatContext.html",[0,0.825,1,0.355,3,0.665,4,0.546,5,0.671,6,0.665,7,0.665,8,0.444,9,0.671,10,1.49,11,0.986,12,0.986,13,1.524,14,1.639,15,0.986,16,1.851,18,0.986,19,0.986,20,0.807,26,0.078,27,1.211,29,0.986,30,1.851,34,0.647,36,0.986,37,0.807,38,0.986,40,2.098,43,1.22,44,1.22,45,1.22,47,0.986,49,1.49,52,0.807,54,1.22,56,1.004,57,0.546,58,0.825,59,0.986,60,1.211,61,0.671,62,1.018,63,2.15,64,1.108,65,1.349,66,1.471,67,2.417,68,1.922,69,1.004,70,0.986,71,0.665,72,0.665,73,0.807,74,0.807,75,0.807,76,0.807,77,0.986,78,1.639,79,0.986,80,0.986,81,1.49,82,1.49,83,0.986,84,0.986,85,0.986,86,1.22,87,0.807,88,0.986,89,0.986,90,0.665,91,1.471,92,1.211,93,0.807,94,1.22,95,1.76,96,0.807,97,0.807,98,0.807,99,0.807,100,0.807,101,0.807,102,0.807,103,0.807,104,0.807,105,0.807,106,0.807,107,0.807,108,0.807,109,0.665,110,1.76,111,0.807,112,0.986,113,0.546,114,2.026,115,1.49,116,1.49,117,0.986,118,1.49,119,0.986,120,1.49,121,1.49,122,0.986,123,1.49,124,0.986,125,0.807,126,0.986,127,1.49,128,0.986,129,0.986,130,0.986,131,1.49,132,1.471,133,1.471,134,0.986,135,0.986,136,0.807,137,0.986,138,0.807,139,0.986,140,0.986,141,0.986,142,0.807,143,0.986,144,0.986,145,0.986,146,0.986,147,0.986,148,0.986,149,0.986,150,0.986,151,1.49,152,0.986,153,0.986,154,0.986,155,1.004,156,0.986,157,0.986,158,1.796,159,0.986,160,0.986,161,0.986,162,0.986,163,0.986,164,1.49,165,0.986,166,0.986,167,0.986,168,0.986,169,0.986,170,0.986,171,0.986,172,0.986,173,0.986,174,0.986,175,0.039,176,0.039,284,0.986]],["title/interfaces/Message.html",[61,0.652,62,0.652]],["body/interfaces/Message.html",[0,0.81,1,0.347,3,0.649,4,0.533,5,0.659,6,0.649,7,0.649,8,0.434,9,0.659,10,1.464,11,0.963,12,0.963,13,1.51,14,1.62,15,0.963,16,1.835,18,0.963,19,0.963,20,0.789,26,0.078,27,1.194,29,0.963,30,1.835,34,0.712,36,0.963,37,0.789,38,0.963,40,2.086,43,1.199,44,1.199,45,1.199,47,0.963,49,1.464,52,0.789,54,1.199,56,0.987,57,0.533,58,0.81,59,0.963,60,1.194,61,0.659,62,1.049,63,2.4,64,1.24,65,1.51,66,1.742,67,2.4,68,1.907,69,0.649,70,0.963,71,0.649,72,0.649,73,0.789,74,0.789,75,0.789,76,0.789,77,0.963,78,1.62,79,0.963,80,0.963,81,1.464,82,1.464,83,0.963,84,0.963,85,0.963,86,1.199,87,0.789,88,0.963,89,0.963,90,0.649,91,1.45,92,1.194,93,0.789,94,1.199,95,1.742,96,0.789,97,0.789,98,0.789,99,0.789,100,0.789,101,0.789,102,0.789,103,0.789,104,0.789,105,0.789,106,0.789,107,0.789,108,0.789,109,0.649,110,1.742,111,0.789,112,0.963,113,0.533,114,2.013,115,1.464,116,1.464,117,0.963,118,1.464,119,0.963,120,1.464,121,1.464,122,0.963,123,1.464,124,0.963,125,0.789,126,0.963,127,1.464,128,0.963,129,0.963,130,0.963,131,1.464,132,1.45,133,1.45,134,0.963,135,0.963,136,0.789,137,0.963,138,0.789,139,0.963,140,0.963,141,0.963,142,0.789,143,0.963,144,0.963,145,0.963,146,0.963,147,0.963,148,0.963,149,0.963,150,0.963,151,1.464,152,0.963,153,0.963,154,0.963,155,0.987,156,0.963,157,0.963,158,1.771,159,0.963,160,0.963,161,0.963,162,0.963,163,0.963,164,1.464,165,0.963,166,0.963,167,0.963,168,0.963,169,0.963,170,0.963,171,0.963,172,0.963,173,0.963,174,0.963,175,0.038,176,0.038,284,0.963]],["title/coverage.html",[285,2.44]],["body/coverage.html",[0,1.022,1,0.665,5,0.832,6,1.689,7,1.689,26,0.076,34,0.665,58,1.274,61,1.036,62,0.832,69,1.245,78,1.513,175,0.06,176,0.06,177,1.274,178,1.513,184,1.847,190,1.513,236,2.296,285,2.296,286,2.296,287,2.977,288,2.977,289,3.534,290,2.977,291,2.296,292,4.226,293,2.296,294,4.226,295,2.296,296,1.513,297,2.977,298,2.977,299,2.977,300,2.977,301,2.296,302,2.296,303,2.977,304,2.977]],["title/dependencies.html",[305,1.51,306,1.738]],["body/dependencies.html",[26,0.077,57,1.129,175,0.064,176,0.064,208,2.04,260,2.535,306,2.04,307,4.589,308,3.287,309,3.939,310,3.038,311,3.287,312,3.287,313,3.287,314,3.287,315,3.287,316,3.287,317,3.287,318,3.287]],["title/index.html",[8,0.652,319,2.332]],["body/index.html",[1,0.347,4,0.534,5,0.434,6,0.65,7,0.65,13,1.195,14,0.79,16,0.79,26,0.076,34,0.347,58,0.534,61,0.434,62,0.434,64,0.534,65,0.65,66,1.451,71,0.65,73,0.79,74,0.79,75,0.79,76,0.79,86,1.966,87,1.2,90,1.435,92,0.65,109,0.65,113,1.329,125,1.2,132,0.79,136,1.2,138,0.79,142,1.2,155,1.657,175,0.038,176,0.038,177,0.811,179,1.451,184,0.965,187,0.965,197,1.199,201,1.199,213,1.773,214,1.199,215,1.199,262,1.199,267,1.199,272,1.822,274,1.822,286,2.984,306,1.466,310,1.199,320,3.613,321,2.856,322,2.362,323,2.362,324,2.856,325,1.554,326,4.041,327,2.362,328,2.856,329,3.19,330,1.554,331,1.554,332,2.362,333,3.431,334,1.554,335,1.554,336,1.554,337,2.362,338,1.554,339,1.554,340,1.554,341,1.554,342,1.554,343,1.554,344,1.554,345,1.554,346,1.554,347,2.856,348,1.554,349,1.554,350,1.554,351,2.856,352,1.554,353,2.362,354,1.554,355,1.554,356,2.362,357,1.554,358,3.613,359,2.856,360,2.362,361,1.554,362,1.554,363,1.554,364,1.554,365,1.554,366,1.554,367,1.554,368,1.554,369,1.554,370,2.856,371,1.554,372,1.554,373,1.554,374,2.362,375,1.554,376,2.362,377,1.554,378,1.554,379,3.19,380,1.554,381,3.19,382,1.554,383,2.362,384,1.554,385,2.362,386,1.554,387,1.554,388,1.554,389,1.554,390,1.554,391,3.431,392,1.554,393,1.554,394,1.554,395,1.554,396,2.362,397,1.554,398,2.362,399,1.554,400,1.554,401,1.554,402,1.554,403,3.869,404,1.554,405,2.362,406,1.554,407,1.554,408,1.554,409,2.362,410,3.613,411,2.362,412,1.554,413,2.856,414,1.554,415,1.554,416,1.554,417,2.856,418,1.554,419,1.554,420,1.554,421,1.554,422,1.554,423,1.554,424,1.554,425,1.554,426,2.362,427,1.554,428,1.554,429,1.554,430,1.554,431,2.362,432,1.554,433,1.554,434,1.554,435,2.856,436,1.554,437,1.554,438,1.554,439,1.554,440,1.554,441,1.554,442,1.554,443,1.554,444,1.554,445,1.554,446,1.554,447,1.554,448,1.554,449,1.554,450,1.554,451,1.199,452,1.554,453,1.554,454,1.554,455,1.554,456,1.554,457,1.554,458,2.362,459,2.362,460,1.554,461,1.554,462,1.554,463,1.554,464,1.554,465,1.554,466,1.554,467,1.554,468,1.554]],["title/modules.html",[469,2.44]],["body/modules.html",[26,0.069,175,0.069,176,0.069,469,2.841]],["title/overview.html",[470,2.44]],["body/overview.html",[0,1.234,26,0.068,175,0.068,176,0.068,179,1.825,284,2.229,289,2.77,470,2.77,471,4.15,472,3.591]],["title/properties.html",[9,0.782,305,1.51]],["body/properties.html",[9,1.018,26,0.072,175,0.068,176,0.068,473,3.643,474,3.643]],["title/routes.html",[296,1.607]],["body/routes.html",[26,0.069,175,0.069,176,0.069,296,1.872]],["title/miscellaneous/variables.html",[475,1.51,476,2.159]],["body/miscellaneous/variables.html",[8,0.827,26,0.077,34,0.942,41,2.143,42,2.143,43,1.877,44,1.877,45,1.877,58,1.449,175,0.06,176,0.06,291,2.282,293,2.849,295,2.282,296,2.046,301,2.282,302,2.282,451,2.849,475,2.282,476,2.282,477,2.959,478,2.959,479,2.959,480,2.959,481,2.959,482,2.959,483,2.959,484,2.959,485,3.694,486,2.959,487,3.694,488,3.694,489,2.959]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":289,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["0.0.0",{"_index":474,"title":{},"body":{"properties.html":{}}}],["0.15.0",{"_index":318,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":294,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":298,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":299,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":300,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":290,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":297,"title":{},"body":{"coverage.html":{}}}],["0528",{"_index":145,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["1",{"_index":472,"title":{},"body":{"overview.html":{}}}],["19",{"_index":340,"title":{},"body":{"index.html":{}}}],["19.2.0",{"_index":307,"title":{},"body":{"dependencies.html":{}}}],["1rem",{"_index":219,"title":{},"body":{"components/AppComponent.html":{}}}],["2",{"_index":471,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":316,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":203,"title":{},"body":{"components/AppComponent.html":{}}}],["7.8.0",{"_index":314,"title":{},"body":{"dependencies.html":{}}}],["8b:free",{"_index":147,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["actual_component",{"_index":235,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["add",{"_index":112,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["ai",{"_index":155,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["ai.service.ts",{"_index":387,"title":{},"body":{"index.html":{}}}],["aiservice",{"_index":1,"title":{"injectables/AiService.html":{}},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"coverage.html":{},"index.html":{}}}],["aiservice.error",{"_index":282,"title":{},"body":{"components/ChatComponent.html":{}}}],["aiservice.isloading",{"_index":281,"title":{},"body":{"components/ChatComponent.html":{}}}],["aiservice.messages",{"_index":275,"title":{},"body":{"components/ChatComponent.html":{}}}],["align",{"_index":221,"title":{},"body":{"components/AppComponent.html":{}}}],["angular",{"_index":320,"title":{},"body":{"index.html":{}}}],["angular.json",{"_index":397,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":208,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":308,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":57,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":260,"title":{},"body":{"components/ChatComponent.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":309,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":312,"title":{},"body":{"dependencies.html":{}}}],["another",{"_index":97,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["answer",{"_index":91,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["answering",{"_index":336,"title":{},"body":{"index.html":{}}}],["anthropic",{"_index":85,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["anthropicapikey",{"_index":488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":86,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["api/v1/chat/completions",{"_index":47,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["apikey",{"_index":11,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["apimessages",{"_index":127,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["apiurl",{"_index":12,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["app",{"_index":187,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"index.html":{}}}],["app.component.html",{"_index":194,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":192,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.ts",{"_index":389,"title":{},"body":{"index.html":{}}}],["app.config.ts",{"_index":390,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":178,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":293,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":326,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":139,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["applicationconfig",{"_index":481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["asks",{"_index":107,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["assistant",{"_index":65,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["assistantmessage",{"_index":164,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["async",{"_index":20,"title":{},"body":{"injectables/AiService.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["authorization",{"_index":428,"title":{},"body":{"index.html":{}}}],["auto",{"_index":382,"title":{},"body":{"index.html":{}}}],["automatically",{"_index":462,"title":{},"body":{"index.html":{}}}],["available",{"_index":417,"title":{},"body":{"index.html":{}}}],["avoid",{"_index":414,"title":{},"body":{"index.html":{}}}],["await",{"_index":133,"title":{},"body":{"injectables/AiService.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["aware",{"_index":367,"title":{},"body":{"index.html":{}}}],["away",{"_index":106,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["backend",{"_index":332,"title":{},"body":{"index.html":{}}}],["background",{"_index":223,"title":{},"body":{"components/AppComponent.html":{}}}],["based",{"_index":125,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["body",{"_index":140,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["bot",{"_index":274,"title":{},"body":{"components/ChatComponent.html":{},"index.html":{}}}],["bottom",{"_index":439,"title":{},"body":{"index.html":{}}}],["box",{"_index":443,"title":{},"body":{"index.html":{}}}],["browser",{"_index":310,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["build",{"_index":449,"title":{},"body":{"index.html":{}}}],["building",{"_index":343,"title":{},"body":{"index.html":{}}}],["built",{"_index":325,"title":{},"body":{"index.html":{}}}],["button",{"_index":213,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"index.html":{}}}],["cat",{"_index":95,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["catch",{"_index":165,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["cd",{"_index":408,"title":{},"body":{"index.html":{}}}],["center",{"_index":222,"title":{},"body":{"components/AppComponent.html":{}}}],["changes",{"_index":80,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["chased",{"_index":96,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["chat",{"_index":113,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["chat.component.html",{"_index":238,"title":{},"body":{"components/ChatComponent.html":{}}}],["chat.component.scss",{"_index":240,"title":{},"body":{"components/ChatComponent.html":{}}}],["chatbot",{"_index":90,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["chatcomponent",{"_index":190,"title":{"components/ChatComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"coverage.html":{}}}],["chatcontext",{"_index":69,"title":{"interfaces/ChatContext.html":{}},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"coverage.html":{}}}],["check",{"_index":261,"title":{},"body":{"components/ChatComponent.html":{}}}],["class",{"_index":72,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["claude",{"_index":202,"title":{},"body":{"components/AppComponent.html":{}}}],["clear",{"_index":79,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["clearchat",{"_index":18,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["clearcontext",{"_index":19,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["cli",{"_index":398,"title":{},"body":{"index.html":{}}}],["click",{"_index":435,"title":{},"body":{"index.html":{}}}],["clone",{"_index":405,"title":{},"body":{"index.html":{}}}],["code",{"_index":324,"title":{},"body":{"index.html":{}}}],["color",{"_index":224,"title":{},"body":{"components/AppComponent.html":{}}}],["commonmodule",{"_index":189,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["communicates",{"_index":419,"title":{},"body":{"index.html":{}}}],["communication",{"_index":388,"title":{},"body":{"index.html":{}}}],["compiles",{"_index":450,"title":{},"body":{"index.html":{}}}],["completions",{"_index":355,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":359,"title":{},"body":{"index.html":{}}}],["compodoc:build",{"_index":458,"title":{},"body":{"index.html":{}}}],["component",{"_index":177,"title":{"components/AppComponent.html":{},"components/ChatComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":232,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["components",{"_index":179,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"index.html":{},"overview.html":{}}}],["components/chat/chat.component",{"_index":209,"title":{},"body":{"components/AppComponent.html":{}}}],["computed",{"_index":254,"title":{},"body":{"components/ChatComponent.html":{}}}],["configurable",{"_index":369,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":391,"title":{},"body":{"index.html":{}}}],["configure",{"_index":84,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["configured",{"_index":412,"title":{},"body":{"index.html":{}}}],["configures",{"_index":423,"title":{},"body":{"index.html":{}}}],["console.log(\"ai",{"_index":163,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["console.log(\"raw",{"_index":159,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["console.log(response",{"_index":148,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["const",{"_index":114,"title":{},"body":{"injectables/AiService.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["contains",{"_index":323,"title":{},"body":{"index.html":{}}}],["content",{"_index":40,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["context",{"_index":13,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["context:\\n\\n${this.context()?.content",{"_index":126,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["convenience",{"_index":421,"title":{},"body":{"index.html":{}}}],["conversations",{"_index":368,"title":{},"body":{"index.html":{}}}],["core",{"_index":338,"title":{},"body":{"index.html":{}}}],["corner",{"_index":441,"title":{},"body":{"index.html":{}}}],["cors",{"_index":415,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":285,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":463,"title":{},"body":{"index.html":{}}}],["data",{"_index":158,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["data.choices?.[0]?.message?.content",{"_index":161,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["date",{"_index":68,"title":{},"body":{"injectables/AiService.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["deepseek",{"_index":352,"title":{},"body":{"index.html":{}}}],["deepseek/deepseek",{"_index":143,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["default",{"_index":41,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["dependencies",{"_index":306,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["design",{"_index":378,"title":{},"body":{"index.html":{}}}],["designed",{"_index":334,"title":{},"body":{"index.html":{}}}],["development",{"_index":358,"title":{},"body":{"index.html":{}}}],["directive",{"_index":230,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["directives",{"_index":234,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["directory",{"_index":468,"title":{},"body":{"index.html":{}}}],["disabled",{"_index":263,"title":{},"body":{"components/ChatComponent.html":{}}}],["display",{"_index":375,"title":{},"body":{"index.html":{}}}],["displaying",{"_index":365,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":286,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dom",{"_index":182,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["during",{"_index":357,"title":{},"body":{"index.html":{}}}],["dynamic",{"_index":311,"title":{},"body":{"dependencies.html":{}}}],["e3547af831c90b00e73c28335c36a863dc93b31be4d8eedb81749e5f47145a55",{"_index":45,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"miscellaneous/variables.html":{}}}],["element",{"_index":229,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["enter",{"_index":267,"title":{},"body":{"components/ChatComponent.html":{},"index.html":{}}}],["environment",{"_index":58,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["environments",{"_index":392,"title":{},"body":{"index.html":{}}}],["environments/environment",{"_index":59,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["error",{"_index":14,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["error(errordata.error?.message",{"_index":153,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["error.message",{"_index":168,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["errordata",{"_index":150,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["event",{"_index":249,"title":{},"body":{"components/ChatComponent.html":{}}}],["event.key",{"_index":266,"title":{},"body":{"components/ChatComponent.html":{}}}],["event.preventdefault",{"_index":269,"title":{},"body":{"components/ChatComponent.html":{}}}],["event.shiftkey",{"_index":268,"title":{},"body":{"components/ChatComponent.html":{}}}],["eventcoalescing",{"_index":484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":381,"title":{},"body":{"index.html":{}}}],["executes",{"_index":453,"title":{},"body":{"index.html":{}}}],["export",{"_index":60,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["extract",{"_index":160,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["failed",{"_index":154,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["false",{"_index":489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["features",{"_index":327,"title":{},"body":{"index.html":{}}}],["fence",{"_index":101,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["fetch",{"_index":134,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"coverage.html":{},"index.html":{}}}],["finally",{"_index":171,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["floating",{"_index":328,"title":{},"body":{"index.html":{}}}],["following",{"_index":94,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["formsmodule",{"_index":237,"title":{},"body":{"components/ChatComponent.html":{}}}],["fourth",{"_index":102,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["framework",{"_index":342,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":341,"title":{},"body":{"index.html":{}}}],["function",{"_index":335,"title":{},"body":{"index.html":{}}}],["generated",{"_index":383,"title":{},"body":{"index.html":{}}}],["generates",{"_index":460,"title":{},"body":{"index.html":{}}}],["generating",{"_index":360,"title":{},"body":{"index.html":{}}}],["git",{"_index":406,"title":{},"body":{"index.html":{}}}],["given",{"_index":111,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["handlekeypress",{"_index":244,"title":{},"body":{"components/ChatComponent.html":{}}}],["handlekeypress(event",{"_index":246,"title":{},"body":{"components/ChatComponent.html":{}}}],["handling",{"_index":374,"title":{},"body":{"index.html":{}}}],["hardcoded",{"_index":420,"title":{},"body":{"index.html":{}}}],["header",{"_index":217,"title":{},"body":{"components/AppComponent.html":{}}}],["headers",{"_index":138,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["helpful",{"_index":123,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["html",{"_index":228,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["http://localhost:4200",{"_index":418,"title":{},"body":{"index.html":{}}}],["https://github.com/feldulfz/chatbot.git",{"_index":407,"title":{},"body":{"index.html":{}}}],["https://openrouter.ai",{"_index":425,"title":{},"body":{"index.html":{}}}],["icon",{"_index":438,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":287,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":56,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["imports",{"_index":188,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["includes",{"_index":426,"title":{},"body":{"index.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"miscellaneous/variables.html":{}}}],["indicators",{"_index":373,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["initial",{"_index":431,"title":{},"body":{"index.html":{}}}],["initialize",{"_index":214,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["inject",{"_index":207,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["inject(aiservice",{"_index":199,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AiService.html":{}},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"coverage.html":{},"overview.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AiService.html":{}}}],["input",{"_index":442,"title":{},"body":{"index.html":{}}}],["install",{"_index":409,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":167,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["integration",{"_index":371,"title":{},"body":{"index.html":{}}}],["interact",{"_index":445,"title":{},"body":{"index.html":{}}}],["interacts",{"_index":330,"title":{},"body":{"index.html":{}}}],["interface",{"_index":61,"title":{"interfaces/ChatContext.html":{},"interfaces/Message.html":{}},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":284,"title":{},"body":{"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"overview.html":{}}}],["isloading",{"_index":15,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["isopen",{"_index":241,"title":{},"body":{"components/ChatComponent.html":{}}}],["issenddisabled",{"_index":242,"title":{},"body":{"components/ChatComponent.html":{}}}],["issues",{"_index":376,"title":{},"body":{"index.html":{}}}],["json",{"_index":157,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["json.stringify",{"_index":141,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["karma",{"_index":457,"title":{},"body":{"index.html":{}}}],["key",{"_index":87,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["keyboardevent",{"_index":247,"title":{},"body":{"components/ChatComponent.html":{}}}],["language",{"_index":346,"title":{},"body":{"index.html":{}}}],["last",{"_index":104,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["legend",{"_index":227,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["loading",{"_index":372,"title":{},"body":{"index.html":{}}}],["local",{"_index":396,"title":{},"body":{"index.html":{}}}],["logic",{"_index":347,"title":{},"body":{"index.html":{}}}],["main",{"_index":385,"title":{},"body":{"index.html":{}}}],["making",{"_index":429,"title":{},"body":{"index.html":{}}}],["management",{"_index":76,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["matching",{"_index":176,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":62,"title":{"interfaces/Message.html":{}},"body":{"injectables/AiService.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"coverage.html":{},"index.html":{}}}],["message.content",{"_index":280,"title":{},"body":{"components/ChatComponent.html":{}}}],["message.role",{"_index":278,"title":{},"body":{"components/ChatComponent.html":{}}}],["message.timestamp",{"_index":277,"title":{},"body":{"components/ChatComponent.html":{}}}],["messages",{"_index":16,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["messaging",{"_index":364,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":185,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["method",{"_index":136,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["methods",{"_index":17,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["miscellaneous",{"_index":475,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["model",{"_index":142,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["modules",{"_index":469,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["msg.content",{"_index":130,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["msg.role",{"_index":129,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["name",{"_index":33,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["navigate",{"_index":465,"title":{},"body":{"index.html":{}}}],["necessary",{"_index":427,"title":{},"body":{"index.html":{}}}],["new",{"_index":78,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"coverage.html":{}}}],["newusermessage",{"_index":115,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["node.js",{"_index":402,"title":{},"body":{"index.html":{}}}],["npm",{"_index":403,"title":{},"body":{"index.html":{}}}],["object",{"_index":487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["occurred",{"_index":170,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["open",{"_index":272,"title":{},"body":{"components/ChatComponent.html":{},"index.html":{}}}],["openrouter",{"_index":351,"title":{},"body":{"index.html":{}}}],["optional",{"_index":35,"title":{},"body":{"injectables/AiService.html":{},"components/ChatComponent.html":{}}}],["overview",{"_index":470,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":305,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["package.json",{"_index":399,"title":{},"body":{"index.html":{}}}],["padding",{"_index":218,"title":{},"body":{"components/AppComponent.html":{}}}],["parameters",{"_index":32,"title":{},"body":{"injectables/AiService.html":{},"components/ChatComponent.html":{}}}],["parse",{"_index":156,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["please",{"_index":124,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["porfolio",{"_index":273,"title":{},"body":{"components/ChatComponent.html":{}}}],["portfolio",{"_index":321,"title":{},"body":{"index.html":{}}}],["post",{"_index":137,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["pounced",{"_index":103,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["powered",{"_index":201,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["prepare",{"_index":120,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["prerequisites",{"_index":401,"title":{},"body":{"index.html":{}}}],["press",{"_index":444,"title":{},"body":{"index.html":{}}}],["primary",{"_index":345,"title":{},"body":{"index.html":{}}}],["private",{"_index":10,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["production",{"_index":451,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":379,"title":{},"body":{"index.html":{}}}],["promise",{"_index":37,"title":{},"body":{"injectables/AiService.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["prompt",{"_index":370,"title":{},"body":{"index.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"properties.html":{}}}],["provide",{"_index":437,"title":{},"body":{"index.html":{}}}],["provided",{"_index":337,"title":{},"body":{"index.html":{}}}],["providedin",{"_index":70,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["providerouter(routes",{"_index":486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providezonechangedetection",{"_index":483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providing",{"_index":354,"title":{},"body":{"index.html":{}}}],["proxied",{"_index":356,"title":{},"body":{"index.html":{}}}],["proxy",{"_index":333,"title":{},"body":{"index.html":{}}}],["proxy.conf.json",{"_index":395,"title":{},"body":{"index.html":{}}}],["questions",{"_index":92,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["qwen3",{"_index":146,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["r1",{"_index":144,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["ran",{"_index":105,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["reactive",{"_index":74,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["readme",{"_index":319,"title":{"index.html":{}},"body":{}}],["real",{"_index":362,"title":{},"body":{"index.html":{}}}],["received",{"_index":162,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["red",{"_index":436,"title":{},"body":{"index.html":{}}}],["related",{"_index":109,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["reply",{"_index":110,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["repository",{"_index":322,"title":{},"body":{"index.html":{}}}],["requests",{"_index":413,"title":{},"body":{"index.html":{}}}],["response",{"_index":132,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["response.json",{"_index":151,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["response.ok",{"_index":149,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["responsive",{"_index":377,"title":{},"body":{"index.html":{}}}],["results",{"_index":175,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":88,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["returns",{"_index":25,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["right",{"_index":440,"title":{},"body":{"index.html":{}}}],["role",{"_index":63,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["root",{"_index":71,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["root'},{'name",{"_index":233,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["route",{"_index":424,"title":{},"body":{"index.html":{}}}],["routes",{"_index":296,"title":{"routes.html":{}},"body":{"coverage.html":{},"routes.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":410,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":313,"title":{},"body":{"dependencies.html":{}}}],["scripts",{"_index":446,"title":{},"body":{"index.html":{}}}],["scriptslocal",{"_index":400,"title":{},"body":{"index.html":{}}}],["scss",{"_index":348,"title":{},"body":{"index.html":{}}}],["selector",{"_index":186,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["send",{"_index":262,"title":{},"body":{"components/ChatComponent.html":{},"index.html":{}}}],["sendmessage",{"_index":21,"title":{},"body":{"injectables/AiService.html":{},"components/ChatComponent.html":{}}}],["sendmessage(usermessage",{"_index":29,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["serrvice/ai.service",{"_index":211,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["serrvice/ai.service.ts",{"_index":7,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"coverage.html":{},"index.html":{}}}],["serrvice/ai.service.ts:120",{"_index":24,"title":{},"body":{"injectables/AiService.html":{}}}],["serrvice/ai.service.ts:125",{"_index":28,"title":{},"body":{"injectables/AiService.html":{}}}],["serrvice/ai.service.ts:20",{"_index":46,"title":{},"body":{"injectables/AiService.html":{}}}],["serrvice/ai.service.ts:21",{"_index":48,"title":{},"body":{"injectables/AiService.html":{}}}],["serrvice/ai.service.ts:24",{"_index":55,"title":{},"body":{"injectables/AiService.html":{}}}],["serrvice/ai.service.ts:25",{"_index":50,"title":{},"body":{"injectables/AiService.html":{}}}],["serrvice/ai.service.ts:26",{"_index":53,"title":{},"body":{"injectables/AiService.html":{}}}],["serrvice/ai.service.ts:27",{"_index":51,"title":{},"body":{"injectables/AiService.html":{}}}],["serrvice/ai.service.ts:29",{"_index":39,"title":{},"body":{"injectables/AiService.html":{}}}],["serrvice/ai.service.ts:38",{"_index":31,"title":{},"body":{"injectables/AiService.html":{}}}],["serve",{"_index":459,"title":{},"body":{"index.html":{}}}],["server",{"_index":411,"title":{},"body":{"index.html":{}}}],["serves",{"_index":461,"title":{},"body":{"index.html":{}}}],["service",{"_index":353,"title":{},"body":{"index.html":{}}}],["services",{"_index":386,"title":{},"body":{"index.html":{}}}],["services/ai",{"_index":210,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["setcontext",{"_index":22,"title":{},"body":{"injectables/AiService.html":{}}}],["setcontext(content",{"_index":38,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["sets",{"_index":430,"title":{},"body":{"index.html":{}}}],["setthecontenxt",{"_index":197,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["settings",{"_index":394,"title":{},"body":{"index.html":{}}}],["setup",{"_index":404,"title":{},"body":{"index.html":{}}}],["short",{"_index":279,"title":{},"body":{"components/ChatComponent.html":{}}}],["signal",{"_index":54,"title":{},"body":{"injectables/AiService.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["signal(false",{"_index":52,"title":{},"body":{"injectables/AiService.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["signal(null",{"_index":49,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["signals",{"_index":73,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["sk",{"_index":43,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"miscellaneous/variables.html":{}}}],["smart_toy",{"_index":283,"title":{},"body":{"components/ChatComponent.html":{}}}],["something",{"_index":108,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["sonnet",{"_index":204,"title":{},"body":{"components/AppComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["specific",{"_index":393,"title":{},"body":{"index.html":{}}}],["src",{"_index":384,"title":{},"body":{"index.html":{}}}],["src/.../app.config.ts",{"_index":477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.routes.ts",{"_index":480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.production.ts",{"_index":478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":184,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{},"index.html":{}}}],["src/app/app.component.ts:13",{"_index":206,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:14",{"_index":205,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:16",{"_index":200,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:18",{"_index":198,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":291,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/app.routes.ts",{"_index":295,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/components/chat/chat.component.ts",{"_index":236,"title":{},"body":{"components/ChatComponent.html":{},"coverage.html":{}}}],["src/app/components/chat/chat.component.ts:13",{"_index":259,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/components/chat/chat.component.ts:14",{"_index":253,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/components/chat/chat.component.ts:16",{"_index":252,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/components/chat/chat.component.ts:19",{"_index":258,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/components/chat/chat.component.ts:26",{"_index":250,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/components/chat/chat.component.ts:34",{"_index":248,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/components/chat/chat.component.ts:41",{"_index":251,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/services/ai",{"_index":6,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"coverage.html":{},"index.html":{}}}],["src/environments/environment.production.ts",{"_index":301,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":302,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/proxy.conf.json",{"_index":422,"title":{},"body":{"index.html":{}}}],["start",{"_index":447,"title":{},"body":{"index.html":{}}}],["starts",{"_index":448,"title":{},"body":{"index.html":{}}}],["startthe",{"_index":416,"title":{},"body":{"index.html":{}}}],["state",{"_index":75,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["statements",{"_index":288,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":467,"title":{},"body":{"index.html":{}}}],["string",{"_index":30,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["structure",{"_index":380,"title":{},"body":{"index.html":{}}}],["styles",{"_index":181,"title":{},"body":{"components/AppComponent.html":{}}}],["styles/variables",{"_index":216,"title":{},"body":{"components/AppComponent.html":{}}}],["styleurl",{"_index":239,"title":{},"body":{"components/ChatComponent.html":{}}}],["styleurls",{"_index":191,"title":{},"body":{"components/AppComponent.html":{}}}],["styling",{"_index":349,"title":{},"body":{"index.html":{}}}],["subtitle",{"_index":195,"title":{},"body":{"components/AppComponent.html":{}}}],["system",{"_index":66,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["systemmessage",{"_index":131,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["systemmessagetemp",{"_index":121,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["table",{"_index":304,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":303,"title":{},"body":{"coverage.html":{}}}],["technologies",{"_index":339,"title":{},"body":{"index.html":{}}}],["template",{"_index":180,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["templateurl",{"_index":193,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["test",{"_index":452,"title":{},"body":{"index.html":{}}}],["tests",{"_index":455,"title":{},"body":{"index.html":{}}}],["text",{"_index":220,"title":{},"body":{"components/AppComponent.html":{}}}],["third",{"_index":99,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["this.aiservice.context",{"_index":257,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.aiservice.isloading",{"_index":256,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.aiservice.sendmessage(message",{"_index":265,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.aiservice.setcontext('you",{"_index":212,"title":{},"body":{"components/AppComponent.html":{}}}],["this.apikey",{"_index":82,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["this.apiurl",{"_index":135,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["this.clearchat",{"_index":174,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["this.context",{"_index":122,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["this.context.set",{"_index":77,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["this.context.set(null",{"_index":173,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["this.error.set('please",{"_index":83,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["this.error.set(error",{"_index":166,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["this.error.set(null",{"_index":118,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["this.isloading.set(false",{"_index":172,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["this.isloading.set(true",{"_index":117,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["this.isopen.update(open",{"_index":271,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.messages().map(msg",{"_index":128,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["this.messages.set",{"_index":81,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["this.messages.update(messages",{"_index":116,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["this.sendmessage",{"_index":270,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.setcontext('you",{"_index":89,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["this.userinput().trim",{"_index":255,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.userinput.set",{"_index":264,"title":{},"body":{"components/ChatComponent.html":{}}}],["through",{"_index":331,"title":{},"body":{"index.html":{}}}],["throw",{"_index":152,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["time",{"_index":363,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":67,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["timestamps",{"_index":366,"title":{},"body":{"index.html":{}}}],["title",{"_index":196,"title":{},"body":{"components/AppComponent.html":{}}}],["togglechat",{"_index":245,"title":{},"body":{"components/ChatComponent.html":{}}}],["toggled",{"_index":361,"title":{},"body":{"index.html":{}}}],["track",{"_index":276,"title":{},"body":{"components/ChatComponent.html":{}}}],["tree",{"_index":183,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["triggered",{"_index":432,"title":{},"body":{"index.html":{}}}],["true",{"_index":485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["try",{"_index":119,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["tslib",{"_index":315,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":34,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":344,"title":{},"body":{"index.html":{}}}],["ui",{"_index":433,"title":{},"body":{"index.html":{}}}],["unexpected",{"_index":169,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["unit",{"_index":454,"title":{},"body":{"index.html":{}}}],["url",{"_index":466,"title":{},"body":{"index.html":{}}}],["usage",{"_index":434,"title":{},"body":{"index.html":{}}}],["use",{"_index":215,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["user",{"_index":64,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"index.html":{}}}],["userinput",{"_index":243,"title":{},"body":{"components/ChatComponent.html":{}}}],["usermessage",{"_index":36,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["using",{"_index":93,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["v1",{"_index":44,"title":{},"body":{"injectables/AiService.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":42,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":231,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["variable",{"_index":292,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":476,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["variables.$background",{"_index":225,"title":{},"body":{"components/AppComponent.html":{}}}],["version",{"_index":473,"title":{},"body":{"properties.html":{}}}],["via",{"_index":456,"title":{},"body":{"index.html":{}}}],["view",{"_index":464,"title":{},"body":{"index.html":{}}}],["void",{"_index":27,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["watched",{"_index":100,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["white",{"_index":226,"title":{},"body":{"components/AppComponent.html":{}}}],["widget",{"_index":329,"title":{},"body":{"index.html":{}}}],["within",{"_index":350,"title":{},"body":{"index.html":{}}}],["yard",{"_index":98,"title":{},"body":{"injectables/AiService.html":{},"components/AppComponent.html":{},"interfaces/ChatContext.html":{},"interfaces/Message.html":{}}}],["zone.js",{"_index":317,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AiService.html":{"url":"injectables/AiService.html","title":"injectable - AiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Injectables\n  AiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/ai-serrvice/ai.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                apiKey\n                            \n                            \n                                    Private\n                                apiUrl\n                            \n                            \n                                context\n                            \n                            \n                                error\n                            \n                            \n                                isLoading\n                            \n                            \n                                messages\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearChat\n                            \n                            \n                                clearContext\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                            \n                                setContext\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearChat\n                        \n                    \n                \n            \n            \n                \nclearChat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/ai-serrvice/ai.service.ts:120\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearContext\n                        \n                    \n                \n            \n            \n                \nclearContext()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/ai-serrvice/ai.service.ts:125\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMessage(userMessage: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/ai-serrvice/ai.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userMessage\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setContext\n                        \n                    \n                \n            \n            \n                \nsetContext(content: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/ai-serrvice/ai.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                content\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        apiKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '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'\n                    \n                \n                    \n                        \n                                Defined in src/app/services/ai-serrvice/ai.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        apiUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/api/v1/chat/completions'\n                    \n                \n                    \n                        \n                                Defined in src/app/services/ai-serrvice/ai.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/ai-serrvice/ai.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/ai-serrvice/ai.service.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLoading\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/ai-serrvice/ai.service.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal([])\n                    \n                \n                    \n                        \n                                Defined in src/app/services/ai-serrvice/ai.service.ts:24\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, signal } from '@angular/core';\nimport { environment } from '../../../environments/environment';\n\nexport interface Message {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: Date;\n}\n\nexport interface ChatContext {\n  content: string;\n  timestamp: Date;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AiService {\n\n  private apiKey = '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';\n  private apiUrl = '/api/v1/chat/completions';\n\n  // Signals for reactive state management\n  messages = signal([]);\n  context = signal(null);\n  isLoading = signal(false);\n  error = signal(null);\n  \n  setContext(content: string): void {\n    this.context.set({\n      content,\n      timestamp: new Date()\n    });\n    // Clear messages when context changes\n    this.messages.set([]);\n  }\n\n  async sendMessage(userMessage: string): Promise {\n    if (!this.apiKey || this.apiKey !== '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') {\n      this.error.set('Please configure your Anthropic API key in the environment file');\n      return;\n    }    \n\n    // this.setContext('You are a chatbot that must ONLY answer questions using the following context: The cat chased another cat across the yard, while a third cat watched from the fence, and a fourth cat pounced as the last cat ran away. If the user asks something not related to this context, reply: \"I can only answer questions about the given context.\"');\n\n    // Add user message to the chat\n    const newUserMessage: Message = {\n      role: 'user',\n      content: userMessage,\n      timestamp: new Date()\n    };\n\n    this.messages.update(messages => [...messages, newUserMessage]);\n    this.isLoading.set(true);\n    this.error.set(null);\n\n    try {\n      // Prepare the system message with context\n      const systemMessageTemp = this.context()\n        ? `You are a helpful assistant. Please answer questions based on the following context:\\n\\n${this.context()?.content}`\n        : 'You are a helpful assistant.';\n\n      // Prepare messages for the API\n      const apiMessages = this.messages().map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n\n      const systemMessage = {\n        role: 'system',\n        content: systemMessageTemp,\n      };\n\n      const response = await fetch(\n        this.apiUrl,\n        {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            model: 'deepseek/deepseek-r1-0528-qwen3-8b:free',\n            messages: [\n              systemMessage, \n              ...apiMessages\n            ]            \n          }),\n        },\n      );\n\n      // console.log(response)\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error?.message || 'Failed to get response from ai');\n      }\n\n      // Parse the JSON\n      const data = await response.json();\n\n      // console.log(\"Raw data:\", data);\n\n      // Extract AI message\n      const reply = data.choices?.[0]?.message?.content || \"No response received\";\n      \n      // console.log(\"AI reply:\", reply);\n\n      const assistantMessage: Message = {\n        role: 'assistant',\n        content: reply,\n        timestamp: new Date()\n      };\n\n      this.messages.update(messages => [...messages, assistantMessage]);\n    } catch (error) {\n      this.error.set(error instanceof Error ? error.message : 'An unexpected error occurred');\n    } finally {\n      this.isLoading.set(false);\n    }\n  }\n\n  clearChat(): void {\n    this.messages.set([]);\n    this.error.set(null);\n  }\n\n  clearContext(): void {\n    this.context.set(null);\n    this.clearChat();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                                ChatComponent\n                \n            \n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aiService\n                            \n                            \n                                subtitle\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setTheContenxt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setTheContenxt\n                        \n                    \n                \n            \n            \n                \nsetTheContenxt()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app.component.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        aiService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AiService)\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subtitle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Powered by Claude 4 Sonnet'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Claude AI Assistant'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ChatComponent } from './components/chat/chat.component';\nimport { AiService } from './services/ai-serrvice/ai.service';\n\n@Component({\n  selector: 'app-root',\n  imports: [CommonModule, ChatComponent],\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'Claude AI Assistant';\n  subtitle = 'Powered by Claude 4 Sonnet';\n  \n  aiService = inject(AiService);\n  \n  setTheContenxt() {\n    this.aiService.setContext('You are a chatbot that must ONLY answer questions using the following context: The cat chased another cat across the yard, while a third cat watched from the fence, and a fourth cat pounced as the last cat ran away. If the user asks something not related to this context, reply: \"I can only answer questions about the given context.\"');\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        🤖\n        {{ title }}\n      \n      {{ subtitle }}\n    \n  \n\n  \n    \n      \n      \n      \n\n      \n\n    \n  \n\n -->\n\n\n\n  \n  \n  \n    Button Initialize Context\n  \n\n\n\n    \n\n    \n                \n                    ./app.component.scss\n                \n                @use '../styles/variables';\n\n.app-header {\n    padding: 1rem;\n    text-align: center;\n}\n\n.app-content {\n    padding: 1rem;\n    background-color: variables.$background-white;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    🤖        {{ title }}            {{ subtitle }}                                           -->          Button Initialize Context  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChatComponent', 'selector': 'app-chat'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChatComponent.html":{"url":"components/ChatComponent.html","title":"component - ChatComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Components\n  \n  ChatComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/chat/chat.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-chat\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./chat.component.html\n            \n\n\n\n            \n                styleUrl\n                ./chat.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aiService\n                            \n                            \n                                isOpen\n                            \n                            \n                                isSendDisabled\n                            \n                            \n                                userInput\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleKeyPress\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                            \n                                toggleChat\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleKeyPress\n                        \n                    \n                \n            \n            \n                \nhandleKeyPress(event: KeyboardEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/chat/chat.component.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/chat/chat.component.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleChat\n                        \n                    \n                \n            \n            \n                \ntoggleChat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/components/chat/chat.component.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        aiService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AiService)\n                    \n                \n                    \n                        \n                                Defined in src/app/components/chat/chat.component.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/components/chat/chat.component.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSendDisabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : computed(() => \n    !this.userInput().trim() || \n    this.aiService.isLoading() ||\n    !this.aiService.context()\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/components/chat/chat.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userInput\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal('')\n                    \n                \n                    \n                        \n                                Defined in src/app/components/chat/chat.component.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, computed, inject, signal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { AiService } from '../../services/ai-serrvice/ai.service';\n\n@Component({\n  selector: 'app-chat',\n  imports: [CommonModule, FormsModule],\n  templateUrl: './chat.component.html',\n  styleUrl: './chat.component.scss'\n})\nexport class ChatComponent {\n  userInput = signal('');\n  isOpen = signal(false); \n\n  aiService = inject(AiService);\n\n  // Computed signal to check if send button should be disabled\n  isSendDisabled = computed(() => \n    !this.userInput().trim() || \n    this.aiService.isLoading() ||\n    !this.aiService.context()\n  );\n\n\n  async sendMessage(): Promise {\n    const message = this.userInput().trim();\n    if (message && !this.aiService.isLoading()) {\n      this.userInput.set('');\n      await this.aiService.sendMessage(message);\n    }\n  }\n\n  handleKeyPress(event: KeyboardEvent): void {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      this.sendMessage();\n    }\n  }\n\n  toggleChat(): void {\n    this.isOpen.update(open => !open);\n  }  \n}\n\n    \n\n    \n        @if (isOpen()) {\n  \n    \n      \n         Porfolio Bot\n      \n      ✕\n    \n\n    \n\n      \n        \n        @for (message of aiService.messages(); track message.timestamp) {\n          \n            \n              {{ message.role === 'user' ? 'You' : 'Porfolio Bot' }}\n              {{ message.timestamp | date: 'short' }}\n            \n            {{ message.content }}\n          \n        }\n        \n        @if (aiService.isLoading()) {\n          \n            \n              Porfolio Bot\n            \n            \n              \n              \n              \n            \n          \n        }\n        \n        @if (aiService.error()) {\n          \n            \n            {{ aiService.error() }}\n          \n        }\n      \n      \n      \n        \n        \n          \n          send\n                     \n        \n      \n    \n  \n}\n\n\n  \n  \n  smart_toy\n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (isOpen()) {                     Porfolio Bot            ✕                              @for (message of aiService.messages(); track message.timestamp) {                                    {{ message.role === \\'user\\' ? \\'You\\' : \\'Porfolio Bot\\' }}              {{ message.timestamp | date: \\'short\\' }}                        {{ message.content }}                  }                @if (aiService.isLoading()) {                                    Porfolio Bot                                                                                                }                @if (aiService.error()) {                                  {{ aiService.error() }}                  }                                                      send                                         }      smart_toy    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ChatComponent', 'selector': 'app-chat'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ChatComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChatContext.html":{"url":"interfaces/ChatContext.html","title":"interface - ChatContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChatContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/ai-serrvice/ai.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, signal } from '@angular/core';\nimport { environment } from '../../../environments/environment';\n\nexport interface Message {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: Date;\n}\n\nexport interface ChatContext {\n  content: string;\n  timestamp: Date;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AiService {\n\n  private apiKey = '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';\n  private apiUrl = '/api/v1/chat/completions';\n\n  // Signals for reactive state management\n  messages = signal([]);\n  context = signal(null);\n  isLoading = signal(false);\n  error = signal(null);\n  \n  setContext(content: string): void {\n    this.context.set({\n      content,\n      timestamp: new Date()\n    });\n    // Clear messages when context changes\n    this.messages.set([]);\n  }\n\n  async sendMessage(userMessage: string): Promise {\n    if (!this.apiKey || this.apiKey !== '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') {\n      this.error.set('Please configure your Anthropic API key in the environment file');\n      return;\n    }    \n\n    // this.setContext('You are a chatbot that must ONLY answer questions using the following context: The cat chased another cat across the yard, while a third cat watched from the fence, and a fourth cat pounced as the last cat ran away. If the user asks something not related to this context, reply: \"I can only answer questions about the given context.\"');\n\n    // Add user message to the chat\n    const newUserMessage: Message = {\n      role: 'user',\n      content: userMessage,\n      timestamp: new Date()\n    };\n\n    this.messages.update(messages => [...messages, newUserMessage]);\n    this.isLoading.set(true);\n    this.error.set(null);\n\n    try {\n      // Prepare the system message with context\n      const systemMessageTemp = this.context()\n        ? `You are a helpful assistant. Please answer questions based on the following context:\\n\\n${this.context()?.content}`\n        : 'You are a helpful assistant.';\n\n      // Prepare messages for the API\n      const apiMessages = this.messages().map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n\n      const systemMessage = {\n        role: 'system',\n        content: systemMessageTemp,\n      };\n\n      const response = await fetch(\n        this.apiUrl,\n        {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            model: 'deepseek/deepseek-r1-0528-qwen3-8b:free',\n            messages: [\n              systemMessage, \n              ...apiMessages\n            ]            \n          }),\n        },\n      );\n\n      // console.log(response)\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error?.message || 'Failed to get response from ai');\n      }\n\n      // Parse the JSON\n      const data = await response.json();\n\n      // console.log(\"Raw data:\", data);\n\n      // Extract AI message\n      const reply = data.choices?.[0]?.message?.content || \"No response received\";\n      \n      // console.log(\"AI reply:\", reply);\n\n      const assistantMessage: Message = {\n        role: 'assistant',\n        content: reply,\n        timestamp: new Date()\n      };\n\n      this.messages.update(messages => [...messages, assistantMessage]);\n    } catch (error) {\n      this.error.set(error instanceof Error ? error.message : 'An unexpected error occurred');\n    } finally {\n      this.isLoading.set(false);\n    }\n  }\n\n  clearChat(): void {\n    this.messages.set([]);\n    this.error.set(null);\n  }\n\n  clearContext(): void {\n    this.context.set(null);\n    this.clearChat();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Message.html":{"url":"interfaces/Message.html","title":"interface - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/ai-serrvice/ai.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:     \"user\" | \"assistant\" | \"system\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"user\" | \"assistant\" | \"system\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, signal } from '@angular/core';\nimport { environment } from '../../../environments/environment';\n\nexport interface Message {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: Date;\n}\n\nexport interface ChatContext {\n  content: string;\n  timestamp: Date;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AiService {\n\n  private apiKey = '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';\n  private apiUrl = '/api/v1/chat/completions';\n\n  // Signals for reactive state management\n  messages = signal([]);\n  context = signal(null);\n  isLoading = signal(false);\n  error = signal(null);\n  \n  setContext(content: string): void {\n    this.context.set({\n      content,\n      timestamp: new Date()\n    });\n    // Clear messages when context changes\n    this.messages.set([]);\n  }\n\n  async sendMessage(userMessage: string): Promise {\n    if (!this.apiKey || this.apiKey !== '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') {\n      this.error.set('Please configure your Anthropic API key in the environment file');\n      return;\n    }    \n\n    // this.setContext('You are a chatbot that must ONLY answer questions using the following context: The cat chased another cat across the yard, while a third cat watched from the fence, and a fourth cat pounced as the last cat ran away. If the user asks something not related to this context, reply: \"I can only answer questions about the given context.\"');\n\n    // Add user message to the chat\n    const newUserMessage: Message = {\n      role: 'user',\n      content: userMessage,\n      timestamp: new Date()\n    };\n\n    this.messages.update(messages => [...messages, newUserMessage]);\n    this.isLoading.set(true);\n    this.error.set(null);\n\n    try {\n      // Prepare the system message with context\n      const systemMessageTemp = this.context()\n        ? `You are a helpful assistant. Please answer questions based on the following context:\\n\\n${this.context()?.content}`\n        : 'You are a helpful assistant.';\n\n      // Prepare messages for the API\n      const apiMessages = this.messages().map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n\n      const systemMessage = {\n        role: 'system',\n        content: systemMessageTemp,\n      };\n\n      const response = await fetch(\n        this.apiUrl,\n        {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            model: 'deepseek/deepseek-r1-0528-qwen3-8b:free',\n            messages: [\n              systemMessage, \n              ...apiMessages\n            ]            \n          }),\n        },\n      );\n\n      // console.log(response)\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error?.message || 'Failed to get response from ai');\n      }\n\n      // Parse the JSON\n      const data = await response.json();\n\n      // console.log(\"Raw data:\", data);\n\n      // Extract AI message\n      const reply = data.choices?.[0]?.message?.content || \"No response received\";\n      \n      // console.log(\"AI reply:\", reply);\n\n      const assistantMessage: Message = {\n        role: 'assistant',\n        content: reply,\n        timestamp: new Date()\n      };\n\n      this.messages.update(messages => [...messages, assistantMessage]);\n    } catch (error) {\n      this.error.set(error instanceof Error ? error.message : 'An unexpected error occurred');\n    } finally {\n      this.isLoading.set(false);\n    }\n  }\n\n  clearChat(): void {\n    this.messages.set([]);\n    this.error.set(null);\n  }\n\n  clearContext(): void {\n    this.context.set(null);\n    this.clearChat();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/app.routes.ts\n            \n            variable\n            routes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/components/chat/chat.component.ts\n            \n            component\n            ChatComponent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/app/services/ai-serrvice/ai.service.ts\n            \n            injectable\n            AiService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                        src/app/services/ai-serrvice/ai.service.ts\n            \n            interface\n            ChatContext\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/app/services/ai-serrvice/ai.service.ts\n            \n            interface\n            Message\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/environments/environment.production.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/common : ^19.2.0\n        \n            @angular/compiler : ^19.2.0\n        \n            @angular/core : ^19.2.0\n        \n            @angular/forms : ^19.2.0\n        \n            @angular/platform-browser : ^19.2.0\n        \n            @angular/platform-browser-dynamic : ^19.2.0\n        \n            @angular/router : ^19.2.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"readme - index","body":"\n                   \n\n\nAngular AI Portfolio Chatbot\n\nThis repository contains the source code for an AI-powered chatbot built with Angular. The application features a floating chat widget that interacts with an AI model through a backend proxy. The chatbot is designed to function as a \"Portfolio Bot,\" answering questions based on a provided context.\nCore Technologies\n\nAngular 19: Frontend framework for building the application.\nTypeScript: Primary language for the application logic.\nSCSS: For styling the components.\nAngular Signals: For reactive state management within the application.\nOpenRouter / DeepSeek: The AI service providing the chat completions, proxied during development.\nCompodoc: For generating code documentation.\n\nFeatures\n\nFloating chat widget that can be toggled on and off.\nReal-time messaging interface displaying user and assistant messages with timestamps.\nContext-aware conversations based on a configurable system prompt.\nAPI integration with a proxied AI backend (OpenRouter).\nLoading indicators while the AI is generating a response.\nError handling and display for API-related issues.\nResponsive design for the chat components.\n\nProject Structure\nExample :.\n├── documentation/       # Auto-generated documentation by Compodoc\n├── src/\n│   ├── app/\n│   │   ├── components/\n│   │   │   └── chat/      # The main chat widget component and logic\n│   │   ├── services/\n│   │   │   └── ai.service.ts # Service for handling AI API communication\n│   │   ├── app.component.ts  # Root application component\n│   │   └── app.config.ts     # Main application configuration\n│   ├── environments/      # Environment-specific settings\n│   └── proxy.conf.json    # Proxy configuration for local development\n├── angular.json         # Angular CLI configuration\n└── package.json         # Project dependencies and scriptsLocal Development\nPrerequisites\n\nNode.js and npm\nAngular CLI\n\nSetup\n\nClone the repository:\nExample :git clone https://github.com/feldulfz/chatbot.git\ncd chatbot\nInstall dependencies:\nExample :npm install\nRun the development server:\nThe project is configured to use a proxy for API requests to avoid CORS issues.\nExample :npm startThe application will be available at http://localhost:4200/.\n\n\nConfiguration\nThe application communicates with the OpenRouter API. A development API key is hardcoded for convenience.\n\nsrc/proxy.conf.json: This file configures the proxy to route /api requests to https://openrouter.ai and includes the necessary authorization headers.\nsrc/app/services/ai-serrvice/ai.service.ts: The AiService contains the API key and logic for making requests to the AI model.\nsrc/app/app.component.ts: The setTheContenxt() method sets the initial system prompt for the chatbot. This method is triggered by a button in the UI.\n\nUsage\n\nOpen the application in your browser.\nClick the red \"Button Initialize Context\" to provide the initial system prompt to the AI.\nClick the floating chat icon in the bottom right corner to open the chat widget.\nType your message in the input box and press Enter or click the send button to interact with the Portfolio Bot.\n\nAvailable Scripts\n\nnpm start: Starts the local development server with the proxy configuration.\nnpm run build: Compiles the application for production.\nnpm run test: Executes unit tests via Karma.\nnpm run compodoc:build-and-serve: Generates and serves the code documentation.\n\nDocumentation\nThis project includes automatically generated documentation created by Compodoc. To view it, run npm run compodoc:build-and-serve and navigate to the provided URL. The static documentation is also available in the /documentation directory.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n\n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        0 \n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            environment   (src/.../environment.production.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            routes   (src/.../app.routes.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\n}\n                    \n                \n\n\n        \n    \n\n    src/environments/environment.production.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n  anthropicApiKey: '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'\n}\n                    \n                \n\n\n        \n    \n\n    src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n  anthropicApiKey: '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'\n}\n                    \n                \n\n\n        \n    \n\n    src/app/app.routes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        routes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Routes\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
